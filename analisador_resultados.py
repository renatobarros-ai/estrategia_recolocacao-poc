"""
M√≥dulo respons√°vel por processar opera√ß√µes e gerar visualiza√ß√µes de resultados
"""

import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from typing import List, Dict, Any
import streamlit as st


def criar_grafico_principal(
    dados_historicos: pd.DataFrame,
    operacoes: List[Dict[str, Any]]
) -> go.Figure:
    """
    Cria o gr√°fico principal com pre√ßos e marcadores de opera√ß√µes
    
    Par√¢metros:
        dados_historicos: DataFrame com dados OHLCV
        operacoes: Lista de opera√ß√µes executadas
    
    Retorno:
        Figura plotly com gr√°fico completo
    """
    fig = go.Figure()
    
    # Adicionar linha de pre√ßos
    fig.add_trace(go.Scatter(
        x=dados_historicos['timestamp'],
        y=dados_historicos['close'],
        mode='lines',
        name='Pre√ßo de Fechamento',
        line=dict(color='blue', width=2)
    ))
    
    if operacoes:
        # Separar opera√ß√µes por tipo
        compras = [op for op in operacoes if op['tipo'] == 'COMPRA']
        vendas = [op for op in operacoes if op['tipo'] == 'VENDA']
        
        # Adicionar marcadores de compra
        if compras:
            fig.add_trace(go.Scatter(
                x=[op['timestamp'] for op in compras],
                y=[op['preco'] for op in compras],
                mode='markers',
                name='Compras',
                marker=dict(
                    color='green',
                    size=12,
                    symbol='triangle-up',
                    line=dict(width=2, color='darkgreen')
                )
            ))
        
        # Adicionar marcadores de venda
        if vendas:
            fig.add_trace(go.Scatter(
                x=[op['timestamp'] for op in vendas],
                y=[op['preco'] for op in vendas],
                mode='markers',
                name='Vendas',
                marker=dict(
                    color='red',
                    size=12,
                    symbol='triangle-down',
                    line=dict(width=2, color='darkred')
                )
            ))
    
    # Configurar layout
    fig.update_layout(
        title='Estrat√©gia de Recoloca√ß√£o de Posi√ß√£o - Hist√≥rico de Pre√ßos e Opera√ß√µes',
        xaxis_title='Data/Hora',
        yaxis_title='Pre√ßo (USD)',
        hovermode='x unified',
        showlegend=True,
        height=600,
        template='plotly_white'
    )
    
    # Formata√ß√£o do eixo Y para valores monet√°rios
    fig.update_layout(yaxis=dict(tickformat='$,.2f'))
    
    return fig


def processar_tabela_operacoes(operacoes: List[Dict[str, Any]]) -> pd.DataFrame:
    """
    Processa lista de opera√ß√µes em DataFrame formatado para exibi√ß√£o
    
    Par√¢metros:
        operacoes: Lista de opera√ß√µes executadas
    
    Retorno:
        DataFrame formatado para exibi√ß√£o na interface
    """
    if not operacoes:
        return pd.DataFrame()
    
    # Converter para DataFrame
    df_operacoes = pd.DataFrame(operacoes)
    
    # Formatar colunas para exibi√ß√£o
    df_formatado = pd.DataFrame()
    df_formatado['Data/Hora'] = df_operacoes['timestamp'].dt.strftime('%d/%m/%Y %H:%M')
    df_formatado['Tipo'] = df_operacoes['tipo']
    df_formatado['Pre√ßo'] = df_operacoes['preco'].apply(lambda x: f'${x:,.2f}')
    df_formatado['Quantidade'] = df_operacoes['quantidade_tokens'].apply(lambda x: f'{x:.6f}')
    df_formatado['Total Tokens'] = df_operacoes['total_tokens_apos_operacao'].apply(lambda x: f'{x:.6f}')
    df_formatado['Lucro Opera√ß√£o'] = df_operacoes['lucro_operacao'].apply(lambda x: f'{x:+.6f}')
    df_formatado['Lucro %'] = df_operacoes['lucro_percentual'].apply(lambda x: f'{x:+.1f}%')
    
    return df_formatado


def criar_metricas_resumidas(metricas: Dict[str, Any]) -> Dict[str, tuple]:
    """
    Organiza m√©tricas para exibi√ß√£o com st.metric
    
    Par√¢metros:
        metricas: Dicion√°rio com m√©tricas calculadas
    
    Retorno:
        Dicion√°rio com m√©tricas formatadas para st.metric
    """
    if not metricas:
        return {}
    
    # Organizar m√©tricas com valores e deltas
    metricas_formatadas = {
        'Total de Opera√ß√µes': (
            metricas['total_operacoes'],
            None
        ),
        'Opera√ß√µes Lucrativas': (
            metricas['operacoes_lucrativas'],
            f"+{metricas['operacoes_lucrativas']}" if metricas['operacoes_lucrativas'] > 0 else None
        ),
        'Opera√ß√µes com Preju√≠zo': (
            metricas['operacoes_prejuizo'],
            f"+{metricas['operacoes_prejuizo']}" if metricas['operacoes_prejuizo'] > 0 else None
        ),
        'Tokens Inicial': (
            f"{metricas['tokens_inicial']:.6f}",
            None
        ),
        'Tokens Final': (
            f"{metricas['tokens_final']:.6f}",
            f"{metricas['lucro_total_tokens']:+.6f}"
        ),
        'Lucro Total (%)': (
            f"{metricas['lucro_percentual_total']:.2f}%",
            f"{metricas['lucro_percentual_total']:+.2f}%" if metricas['lucro_percentual_total'] != 0 else None
        )
    }
    
    return metricas_formatadas


def gerar_relatorio_resumo(
    operacoes: List[Dict[str, Any]], 
    metricas: Dict[str, Any],
    simbolo: str,
    periodo_analise: str
) -> str:
    """
    Gera relat√≥rio textual resumido dos resultados
    
    Par√¢metros:
        operacoes: Lista de opera√ß√µes executadas
        metricas: M√©tricas calculadas
        simbolo: S√≠mbolo analisado
        periodo_analise: Per√≠odo da an√°lise
    
    Retorno:
        String com relat√≥rio formatado
    """
    if not operacoes or not metricas:
        return "Nenhuma opera√ß√£o foi executada durante o per√≠odo analisado."
    
    # Calcular taxa de sucesso
    total_compras = len([op for op in operacoes if op['tipo'] == 'COMPRA'])
    taxa_sucesso = (metricas['operacoes_lucrativas'] / total_compras * 100) if total_compras > 0 else 0
    
    relatorio = f"""
## Relat√≥rio Resumido - {simbolo}

**Per√≠odo de An√°lise:** {periodo_analise}

**Resultados Gerais:**
- Total de opera√ß√µes executadas: {metricas['total_operacoes']}
- Opera√ß√µes lucrativas: {metricas['operacoes_lucrativas']} ({taxa_sucesso:.1f}%)
- Opera√ß√µes com preju√≠zo: {metricas['operacoes_prejuizo']}

**Performance Financeira:**
- Tokens inicial: {metricas['tokens_inicial']:.6f}
- Tokens final: {metricas['tokens_final']:.6f}
- Lucro total: {metricas['lucro_total_tokens']:+.6f} tokens ({metricas['lucro_percentual_total']:+.2f}%)

**üéØ Conclus√£o:**  
> A estrat√©gia {"foi lucrativa" if metricas['lucro_percentual_total'] > 0 else "teve preju√≠zo"} no per√≠odo analisado, 
> {"aumentando" if metricas['lucro_total_tokens'] > 0 else "diminuindo"} a quantidade de tokens em 
> {abs(metricas['lucro_percentual_total']):.2f}%.
    """
    
    return relatorio


def validar_dados_para_analise(
    dados_historicos: pd.DataFrame,
    operacoes: List[Dict[str, Any]]
) -> tuple[bool, str]:
    """
    Valida se os dados est√£o adequados para an√°lise
    
    Par√¢metros:
        dados_historicos: DataFrame com dados hist√≥ricos
        operacoes: Lista de opera√ß√µes
    
    Retorno:
        Tupla com status de valida√ß√£o e mensagem
    """
    if dados_historicos.empty:
        return False, "Dados hist√≥ricos n√£o foram carregados corretamente"
    
    if len(dados_historicos) < 168:  # Menos que 7 dias de dados 4h
        return False, "Dados hist√≥ricos insuficientes (m√≠nimo 7 dias necess√°rios)"
    
    # Verificar se h√° pre√ßos v√°lidos
    if dados_historicos['close'].isna().any() or (dados_historicos['close'] <= 0).any():
        return False, "Dados hist√≥ricos cont√™m pre√ßos inv√°lidos"
    
    return True, "Dados v√°lidos para an√°lise"


def exportar_operacoes_csv(operacoes: List[Dict[str, Any]]) -> bytes:
    """
    Exporta opera√ß√µes para formato CSV
    
    Par√¢metros:
        operacoes: Lista de opera√ß√µes
    
    Retorno:
        Bytes do arquivo CSV
    """
    if not operacoes:
        return b""
    
    df = pd.DataFrame(operacoes)
    return df.to_csv(index=False).encode('utf-8')